vector <int> bottomView(Node *root) {
        vector<int> ans;
        if(root==NULL) return ans;
        map<int,int> mp;
        queue<pair<Node* ,int>> q;
        q.push(make_pair(root,0));
        while(!q.empty())
        {
            pair<Node* ,int> p =q.front();
            q.pop();
            struct Node* cur=p.first;
            int level =p.second;
            mp[level]=cur->data;
            if(cur->left!=NULL)  q.push(make_pair(cur->left,level-1));
            if(cur->right!=NULL) q.push(make_pair(cur->right,level+1));  
        }
        map<int,int>::iterator it;
        for(it=mp.begin();it!=mp.end();it++)
        {
            ans.push_back(it->second);
        }
        return ans;
    }
_____________________________________________________________________________________
Recursive solution 

void printBottomViewUtil(Node * root, int curr, int hd, map <int, pair <int, int>> & m)
    {
    if (root == NULL)
        return;
    if (m.find(hd) == m.end()) 
    {
        m[hd] = make_pair(root -> data, curr);
    } 
    else 
    {
        pair < int, int > p = m[hd];
        if (p.second <= curr)
        {
            m[hd].second = curr;
            m[hd].first = root -> data;
        }
    }
    printBottomViewUtil(root -> left, curr + 1, hd - 1, m);
    printBottomViewUtil(root -> right, curr + 1, hd + 1, m);
    }
    
    vector <int> bottomView(Node *root) {
        vector<int> ans;
        map < int, pair < int, int > > m;
        printBottomViewUtil(root, 0, 0, m);
        map < int, pair < int, int > > ::iterator it;
        for (it = m.begin(); it != m.end(); ++it)
        {
            pair < int, int > p = it -> second;
            ans.push_back(p.first);
        }
        return ans;
    }
