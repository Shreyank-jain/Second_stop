public:
    //Function to serialize a tree and return a list containing nodes of tree.
    
    int curr = 0;
    
    void ser(Node* root, vector<int> &ans){
       if(root == NULL){
           ans.push_back(-1);
           return; 
       }
       ans.push_back(root->data);
       ser(root->left,ans);
       ser(root->right,ans);
       return;
    } 
    
    vector<int> serialize(Node *root) 
    {
       vector<int> ans;
       ser(root,ans);
       return ans;
    }
    
    
    
    //Function to deserialize a list and construct the tree.
    Node * deSerialize(vector<int> &A)
    {
       if(curr == A.size() || A[curr]==-1) return NULL;
       Node* root = new Node(A[curr]);
       curr++;
       root->left = deSerialize(A);
       curr++;
       root->right = deSerialize(A);
       return root;
    }
