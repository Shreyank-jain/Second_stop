class Solution
{
   void merge(int arr[], int l, int m, int r)
   {
        int n1 = m-l+1;
        int n2 = r-m;
        int[]left = new int[n1];
        int[]right = new int[n2];
        for(int i = 0; i < n1; i++){
            left[i] = arr[i+l];
        }
        for(int j = 0; j < n2; j++){
            right[j] =  arr[m+1+j];
        }
        
        int i = 0;
        int j = 0;
        int k = l;
        while(i < n1 && j < n2){
            if(left[i] <= right[j]){
                arr[k++] = left[i++];
            }else{
                arr[k++] = right[j++];
            }
        }
        while(i < n1){
            arr[k++] = left[i++];
        }
        while(j < n2){
            arr[k++] = right[j++];
        }
   }
   void mergeSort(int arr[], int l, int r)
   {
       if(r > l){
           int m = l+(r-l)/2;
           mergeSort(arr, l, m);
           mergeSort(arr, m+1, r);
           merge(arr, l, m, r);
       }
   }
}
// class Solution
// {
//     void merge(int arr[], int firstArray[], int lastArray[] )
//     {
//          // Your code here
//          int firstLen=firstArray.length;
//          int lastLen = lastArray.length;
//          int i=0, j=0, k=0;
//          while(firstLen>0 && lastLen>0)
//          {
//              if(firstArray[i]<lastArray[j])
//              {
//                  arr[i]= firstArray[i];
//                  i++;
//              }
//              else
//              {
//                  arr[i]=lastArray[j];
//                  j++;
//              }
//              k++;
//          }
         
//          while(i<firstLen)
//          {
//              arr[k]=firstArray[i];
//              i++; k++;
//          }
//          while(j<lastLen)
//          {
//              arr[k]=lastArray[j];
//              j++; k++;
//          }
//     }
    
//     void mergeSort(int arr[], int l, int r)
//     {
//         //code here
//         int len = arr.length;
//         if (len<2) 
//         return;
//         int mid=(r+1)/2;
//         int firstArray[] = new int [mid];
//         int lastArray[] = new int [(r+1)-mid];
//         for(int i=0;i<mid;i++)
//         {
//             firstArray[i]=arr[i];
//         }
//         for(int i=mid;i<len;i++)
//         {
//             lastArray[i-mid]=arr[i];
//         }
        
//         mergeSort(firstArray,0,mid);
//         mergeSort(lastArray,mid+1,len);
//         merge(arr,firstArray,lastArray);
        
//     }
// }

