class Solution
{
    //Function to sort a linked list of 0s, 1s and 2s.
    static Node segregate(Node head){
        if(head==null || head.next==null)   return head;
        Node zeroHead = null;    Node zeroTail = null;
        Node oneHead = null;    Node oneTail = null;
        Node twoHead = null;    Node twoTail = null;
        while(head!=null){
            if(head.data==0){
                if(zeroHead==null){
                    zeroHead = head;
                    zeroTail=zeroHead;
                }else{
                    zeroTail.next = head;
                    zeroTail = head;
                }
            }else if(head.data==1){
                if(oneHead==null){
                    oneHead = head;
                    oneTail = oneHead;
                }else{
                    oneTail.next = head;
                    oneTail = head;                
                }
            }else{
                if(twoHead==null){
                    twoHead = head;
                    twoTail = twoHead;
                }else{
                    twoTail.next = head;
                    twoTail = head;
                }
            }
            head = head.next;
        }
        if(zeroHead!=null && oneHead!=null && twoHead!=null){
            // 111
            zeroTail.next = oneHead;
            oneTail.next = twoHead;
            twoTail.next=null;
            return zeroHead;
        }else if(zeroHead!=null && oneHead!=null && twoHead==null){
            //110
            zeroTail.next = oneHead;
            oneTail.next=null;
            return zeroHead;
        }else if(zeroHead!=null && oneHead==null && twoHead==null){
            //100
            zeroTail.next = null;
            return zeroHead;
        }
        else if(zeroHead==null && oneHead==null && twoHead!=null){
            //001
            twoTail.next = null;
            return twoHead;
        }else if(zeroHead==null && oneHead!=null && twoHead!=null){
            //011
            oneTail.next = twoHead;
            twoTail.next = null;
            return oneHead;
        }else if(zeroHead==null && oneHead!=null && twoHead==null){
            //010
            oneTail.next=null;
            return oneHead;
        }else{
            // 101
            zeroTail.next = twoHead;
            twoTail.next = null;
            return zeroHead;
        }
        
        
        ************sold solutin*******************
        
        
    //     static Node segregate(Node head)
    // {
    //     if(head == null || head.next == null)
    //         return head;
        
    //     //creating three dummy nodes to point to beginning of the linked lists.
    //     Node zeroD = new Node(0);
    //     Node oneD = new Node(0);
    //     Node twoD = new Node(0);
        
    //     //initializing current pointers for three lists.
    //     Node zero = zeroD, one = oneD, two = twoD;
    //     Node curr = head;
        
    //     //traversing over the list with a pointer.
    //     while(curr != null)
    //     {
    //         //we check data at current node and store the node in it's 
    //         //respective list and update the link part of that list.
    //         if(curr.data == 0)
    //         {
    //             zero.next = curr;
    //             zero = zero.next;
    //             curr = curr.next;
    //         }
    //         else if(curr.data == 1)
    //         {
    //             one.next = curr;
    //             one = one.next;
    //             curr = curr.next;
    //         }
    //         else
    //         {
    //             two.next = curr;
    //             two = two.next;
    //             curr = curr.next;
    //         }
    //     }
    //     //attaching the three lists containing 0s,1s and 2s respectively.
    //     zero.next = (oneD.next  != null) ? (oneD.next) : (twoD.next);
    //     one.next = twoD.next;
    //     two.next = null;
        
    //     //updating the head of the list.
    //     head = zeroD.next;
    //     return head;
    }
}
