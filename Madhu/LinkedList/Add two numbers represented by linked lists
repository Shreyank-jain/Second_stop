class Solution{
    //Function to add two numbers represented by linked list.
    static Node reverse(Node head){
        Node curr = head;
        Node prev = null;
        Node nex = head;
        while(nex != null){
            nex = curr.next;
            curr.next = prev;
            prev = curr;
            curr = nex;
        }
        return prev;
    }
    static Node addTwoLists(Node first, Node second){
        // code here
                Node n1 = reverse(first);
        Node n2 = reverse(second);
       
        Node dummy = new Node(0);
        Node temp = dummy;
        int carry = 0;
        while(n1 != null || n2 != null || carry == 1){
            
            int sum = 0;
            if(n1 != null){
                sum += n1.data;
                n1 = n1.next;
            }
            if(n2 != null){
                sum += n2.data;
                n2 = n2.next;
            }
            
            sum += carry;
            carry = sum / 10;
            Node node = new Node(sum % 10);
            temp.next = node;
            temp = temp.next;
        }
        
        return reverse(dummy.next);

        // return head of sum list
        // Node n = new Node(0);
        // Node res=n.next;
        // int fs=0,ss=0,ts=0;
        // while(first.next!=null)
        // {
        //     int x=first.data;
        //     fs+=x;
        //     fs*=10;
        // }
        // while(second.next!=null)
        // {
        //     int y=second.data;
        //     ss+=y;
        //     ss*=10;
        // }
        // //res.data(ss+fs);
        // ts=ss+fs;
        // Node ps= new Node(ts);
        // res.next=ps;
        // return res.next;
        
    }
}
