-------------using Queue ------------------------------

void floodFill(vector<vector<int>> &K,int x,int y,int k,int n,int  m)
{
    queue<pair<int,int>> q;
    q.push({x,y});
    
    int value = K[x][y];
    while(!q.empty()){
        int i=q.front().first;
        int j=q.front().second;
        q.pop();
        K[i][j] = k;
        
        if((i+1 < n) && K[i+1][j]==value)
            q.push({i+1,j});
        
        if((i-1 >= 0) && K[i-1][j]==value)
            q.push({i-1,j});
    
        if((j+1 < m) && K[i][j+1]==value)
            q.push({i,j+1});
        
        if((j-1 >= 0) && K[i][j-1]==value)
            q.push({i,j-1});
        
        
    }
}

--------------------Using Recursion ----------------------------
void dfs(vector<vector<int>>& image, int sr, int sc, int newC, int oldC)
   {
       if(sr<0 || sr>=image.size() || sc<0 || sc>=image[0].size() || image[sr][sc]!=oldC || image[sr][sc]==newC )
           return;
       image[sr][sc] = newC;
       dfs(image,sr+1,sc,newC,oldC);
       dfs(image,sr-1,sc,newC,oldC);
       dfs(image,sr,sc+1,newC,oldC);
       dfs(image,sr,sc-1,newC,oldC);
       
   }
   
   vector<vector<int>> floodFill(vector<vector<int>>& image, int sr, int sc, int newColor) {
       dfs(image,sr,sc,newColor,image[sr][sc]);
       return image;
   }
