Node* segregate(Node *head) {
        if(!head || !head->next) return head;
       Node* temp = head; 
       unordered_map<int,int> mp ;
       while(temp->next)
       {
          mp[temp->data]++;
          temp=temp->next;
       }
       mp[temp->data]++;
       temp=head;
       while(temp)
       {
           if(mp[0] !=0)
            {
                mp[0]--;
                temp->data=0;
            }
            else if(mp[1] !=0)
            {
                mp[1]--;
                temp->data=1;
            }
            else
            {
                mp[2]--;
                temp->data=2;
            }
            temp=temp->next;
       }
       return head;
    }
    
    
    -----------------------2nd solution------------------------------'
    Node* segregate(Node *head) {
       
       // Add code here
       Node *zero = new Node(-1);
       Node *z = zero;
       Node *one = new Node(-1);
       Node *o = one;
       Node *two = new Node(-1);
       Node *t = two;
       Node *temp = head;
       
       while(temp != NULL)
       {
           if(temp->data == 0){
               
               z->next = temp;
               z = z->next;
           }
           
           else if(temp->data == 1){
               
               o->next = temp;
               o = o->next;
           }
           
           else{
               
               t->next = temp;
               t = t->next;
           }
           
           temp = temp->next;
       }
       
       z->next = (one->next) ? (one->next) : (two->next);
       o->next = two->next;
       t->next = nullptr;
       head = zero->next;
       
       delete zero;
       delete one;
       delete two;
       
       return head;
   }
