bool is_Possible(vector<vector<int>>& grid) 
    {
        int n = grid.size(), m = grid[0].size();
        queue<pair<int,int>> q;
        vector<int> vis(n*m, 0);
        for(int i=0; i<n; i++) {
            for(int j=0; j<m; j++) {
                if(grid[i][j]==1) {
                    vis[i*m + j] = 1;
                    q.push({i, j});
                    break;
                }  
            }
        }
        int dx[] = {-1, 0, +1, 0};
        int dy[] = {0, +1, 0, -1};
        while(!q.empty()) {
            int x = q.front().first;
            int y = q.front().second;
            q.pop();
            if(grid[x][y]==2) return true;
            for(int i=0; i<4; i++) {
                int newX = x+dx[i];
                int newY = y+dy[i];
                if(newX>=0 && newX<n && newY>=0 && newY<m && grid[newX][newY]!=0 && !vis[m*newX + newY]) {
                    vis[m*newX + newY] = 1;
                    q.push({newX, newY});
                }
            }
        }
        return false;
    }
