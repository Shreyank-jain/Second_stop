Following are simple steps based on this trick. 

Sort array Y[].
For every x in X[], find the index idx of the smallest number greater than x (also called ceil of x) in Y[] using binary search, or we can use the inbuilt function upper_bound() in algorithm library.
All the numbers after idx satisfy the relation so just add (n-idx) to the count.
Base Cases and Exceptions: 

Following are exceptions for x from X[] and y from Y[]   

If x = 0, then the count of pairs for this x is 0.
If x = 1, then the count of pairs for this x is equal to count of 0s in Y[].
x smaller than y means x^y is greater than y^x.
x = 2, y = 3 or 4
x = 3, y = 2


   int calculate(int x,int y[],int n, long long no_of_y[])
    {
        if(x==0) return 0;
        if (x==1) return no_of_y[0];
        
        int* idx = upper_bound(y, y + n, x);
        int ans = (y + n) - idx;
        
        ans+=(no_of_y[0]+no_of_y[1]);
        
        if(x==2)  ans-= (no_of_y[3]+no_of_y[4]);
        if(x==3)  ans+= no_of_y[2];
        
        return ans;
    }
    long long countPairs(int x[], int y[], int m, int n)
    {
       long long No_of_y[5] = {0},count=0;
       for(int i=0;i<n;i++)
            if(y[i]<5)
                No_of_y[y[i]]++;
        
        sort(y,y+n);
        for(int i=0;i<m;i++)
            count+=calculate(x[i],y,n,No_of_y);
        
        return count;       
    }
